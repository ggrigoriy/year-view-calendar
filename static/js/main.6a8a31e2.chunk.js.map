{"version":3,"sources":["blocks/Calendar/colors.ts","blocks/Calendar/date.ts","blocks/Calendar/index.ts","blocks/Calendar/Day/Day.tsx","blocks/Calendar/DaysOfWeek/DaysOfWeek.tsx","blocks/Calendar/Legend/Legend.tsx","events.js","blocks/Calendar/Calendar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","iterateByDay","getDayOfWeekIndex","date","getDay","startDate","endDate","dateIterator","regenerator_default","a","wrap","_context","prev","next","Date","setDate","getDate","stop","_marked","this","getDayId","month","getMonth","day","getFullYear","join","eventTypes","BUSINESS_TRIP","VACATION","CONCERT","SUBBOTNIK","UNKNOWN","getEventType","origEvent","text","summary","description","toLowerCase","_arr","Object","values","_i","length","type","includes","getColor","eventTypesVals","indexOf","humanDateToJs","humanDate","split","cnCalendar","cn","getBackground","events","color","map","event","Day","_ref","isCurrent","isWeekend","isPassed","className","currentDate","hasEvents","react_default","createElement","current","otherMonth","meta","weekend","passed","tabIndex","style","background","undefined","idx","react","key","location","url","filter","Boolean","val","weekDays","locale","arguments","toLocaleDateStringOpts","weekday","i","toLocaleDateString","getWeekDays","DaysOfWeek","dayOfWeek","Legend","data","eventStartStr","start","eventEndStr","end","fontSize","lineHeight","toString","verticalAlign","normalizedEvents","_event$split","_event$split2","toArray","interval","eventsData","slice","_interval$split","_interval$split2","slicedToArray","_eventsData$join$spli","_eventsData$join$spli2","trim","parsedEvent","reduce","acc","intervalIterator","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","dayId","value","push","err","return","Calendar","_Component","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","now","year","setFullYear","yearArr","weekIdx","monthIdx","dayOfWeekIdx","prevDate","buildYearArr","props","monthDate","setMonth","week","date1","date2","dayDate","currentEvents","Component","App","Calendar_Calendar_Calendar","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a8a31e2.chunk.js","sourcesContent":["export const colors = [\n    '#E59942', '#FBFF8C', '#649B5E',\n    '#49B851', '#14A0E7', '#A2EEFE', '#79B473'\n];\n","import { colors } from './colors';\n\n/**\n * Возвращает индекс дня недели, начиная с понедельника\n * @param date Date - дата, для которой необходимо вернуть индекс\n */\nfunction getDayOfWeekIndex(date: Date) {\n    return (date.getDay() + 6) % 7;\n}\n\n/**\n * Возвращает массив названий дней недели для заданной локали\n * По-умолчанию ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс']\n * @param locale Локаль\n */\nexport function getWeekDays(locale = 'ru-Ru') {\n    const weekDays: string[] = [];\n    const toLocaleDateStringOpts = { weekday: 'short' };\n\n    const dateIterator = new Date();\n\n    for (let i = 0; i < 7; i++) {\n        dateIterator.setDate(dateIterator.getDate() + 1);\n        weekDays[getDayOfWeekIndex(dateIterator)] = dateIterator.toLocaleDateString(locale, toLocaleDateStringOpts);\n    }\n\n    return weekDays;\n};\n\n/**\n * Возвращает итератор по одному дню от startDate до endDate\n * @param startDate Date - дата начала\n * @param endDate Date — конечная дата\n */\nexport function *iterateByDay(startDate: Date, endDate: Date): IterableIterator<Date> {\n    const dateIterator = new Date(startDate);\n\n    while (dateIterator < endDate) {\n        yield dateIterator;\n        dateIterator.setDate(dateIterator.getDate() + 1);\n    }\n}\n\n/**\n * Для переданной даты возвращает строку вида YYYYMMDD\n * @param date Date — дата\n */\nexport function getDayId(date: Date): string {\n    const month = date.getMonth();\n    const day = date.getDate();\n\n    return [\n        date.getFullYear(),\n        (month < 10 ? '0' : '') + month,\n        (day < 10 ? '0' : '') + day\n    ].join('');\n}\n\n/**\n * Проверяет, что две даты — это один и тот же день\n * @param date1 Date\n * @param date2 Date\n */\nexport function isSameDay(date1: Date, date2: Date): boolean {\n    return getDayId(date1) === getDayId(date2);\n}\n\nexport interface IDay {\n    date: Date;\n    meta?: IDayMeta;\n}\n\ninterface IDayMeta {\n    current?: boolean;\n    otherMonth?: boolean;\n}\n\n/**\n * Генерирует массив из 12 месяцев, содержащих массивы недель, содержащие массивы дней\n * @param year number - год, для которого необходимо сгенерировать массив\n */\nexport function buildYearArr(year?: number) {\n    if (!year) {\n        const now = new Date();\n        year = now.getFullYear();\n    }\n\n    const startDate = new Date(year, 0, 1); // 1st Jan of current year\n    const dateIterator = new Date(startDate);\n    const endDate = new Date(startDate);\n    endDate.setFullYear(startDate.getFullYear() + 1);\n\n    const yearArr : Array<Array<Array<IDay>>> = [];\n    let weekIdx = 0;\n\n    while (dateIterator < endDate) {\n        const monthIdx = dateIterator.getMonth();\n\n        if (!yearArr[monthIdx]) {\n            weekIdx = 0;\n            yearArr[monthIdx] = [];\n        }\n\n        const dayOfWeekIdx = getDayOfWeekIndex(dateIterator);\n\n        if (!yearArr[monthIdx][weekIdx]) {\n            yearArr[monthIdx][weekIdx] = [];\n\n            // when month starts not on monday\n            // keep the days of previous month\n            for (let i = 0; i < dayOfWeekIdx; i++) {\n                const prevDate = new Date(dateIterator);\n                prevDate.setDate(prevDate.getDate() - dayOfWeekIdx + i);\n\n                yearArr[monthIdx][weekIdx].push({\n                    date: prevDate,\n                    meta: {\n                        otherMonth: true\n                    }\n                });\n            }\n        }\n\n        yearArr[monthIdx][weekIdx][dayOfWeekIdx] = {\n            date: new Date(dateIterator)\n        };\n\n        if (getDayOfWeekIndex(dateIterator) === 6) {\n            weekIdx++;\n        }\n\n        dateIterator.setDate(dateIterator.getDate() + 1);\n    }\n\n    return yearArr;\n}\n\nexport interface IEvent {\n    start: Date;\n    end: Date;\n    summary?: string;\n    description?: string;\n    location?: string;\n    url?: string;\n    color: string;\n    type?: string;\n}\n\n// TODO: actualy the structure is never used as is anywhere yet\n// consider to simplify\nconst eventTypes = {\n    BUSINESS_TRIP: 'командировка',\n    VACATION: 'отпуск',\n    CONCERT: 'концерт',\n    SUBBOTNIK: 'субботник',\n    UNKNOWN: ''\n};\n\nfunction getEventType(origEvent: any) {\n    const text = (origEvent.summary + origEvent.description).toLowerCase();\n\n    for (const type of Object.values(eventTypes)) {\n        if (text.includes(type)) {\n            return type;\n        }\n    }\n\n    return eventTypes.UNKNOWN;\n}\n\nconst getColor = (function() {\n    const eventTypesVals = Object.values(eventTypes);\n\n    return function(origEvent: any): string {\n        return colors[eventTypesVals.indexOf(getEventType(origEvent))];\n    }\n})();\n\nexport function icalToInternalFormat(icalData: any[]): IEvent[] {\n    return icalData.reduce((acc: IEvent[], origEvent, idx): IEvent[] => {\n        if (origEvent.summary || origEvent.description) {\n            acc.push({\n                start: new Date(origEvent.start),\n                end: new Date(origEvent.end),\n                summary: origEvent.summary,\n                description: origEvent.description,\n                location: origEvent.location,\n                url: origEvent.url && origEvent.url.params.VALUE,\n                // TODO: not optimal\n                color: getColor(origEvent),\n                type: getEventType(origEvent)\n            });\n        }\n\n        return acc;\n    }, [])\n    .sort((a, b) => +a.start - +b.start); // TODO: check if it's really needed\n}\n\ntype IEventsByDay = Record<string, IEvent[]>;\n\nexport function getEventsByDay(events: IEvent[]) {\n    return events.reduce((acc: IEventsByDay, event, idx) => {\n        const intervalIterator = iterateByDay(event.start, event.end);\n\n        for (let date of intervalIterator) {\n            const dayId = getDayId(date);\n\n            acc[dayId] || (acc[dayId] = []);\n\n            acc[dayId].push(event);\n        }\n\n        return acc;\n    }, {} as IEventsByDay);\n}\n\nfunction humanDateToJs(humanDate: string) {\n    const date = humanDate.split('.');\n\n    return new Date(+date[2] || new Date().getFullYear(), +date[1] - 1, +date[0]);\n}\n\nexport function parseHumanEvents(eventsDescription: string): IEvent[] {\n    const events = eventsDescription.split('\\n');\n\n    return events.map(event => {\n        const [interval, ...eventsData] = event.split(/\\s/);\n        const [start, end] = interval.split('-');\n        const [summary, ...descriptionData] = eventsData.join(' ').split('.');\n        const description = descriptionData.join('.').trim();\n        const parsedEvent = {\n            start: humanDateToJs(start),\n            end: humanDateToJs(end || start),\n            summary,\n            description\n        } as IEvent;\n\n        parsedEvent.type = getEventType(parsedEvent);\n        parsedEvent.color = getColor(parsedEvent)\n\n        return parsedEvent;\n    });\n}\n","import { cn } from '@bem-react/classname';\n\nexport const cnCalendar = cn('Calendar');\n","import React, { Fragment } from 'react';\nimport { IDay, IEvent } from '../date';\n\ninterface IDayProps {\n  day: IDay;\n  isCurrent: boolean;\n  events: IEvent[];\n  isWeekend: boolean;\n  isPassed: boolean;\n  className?: string;\n}\n\nimport { cnCalendar } from '..';\n\nfunction getBackground(events: IEvent[]): string {\n  if (events.length === 1) {\n    return events[0].color;\n  }\n\n  // TODO: проверить больше 2 событий в день\n\n  return 'linear-gradient(to bottom, ' + events.map(event => {\n    return event.color + ' ' + (100 / events.length) + '%';\n  }).join(', ') + ')';\n}\n\nexport function Day({ day, isCurrent, isWeekend, isPassed, events, className }: IDayProps) {\n  const currentDate = day.date.getDate();\n  const hasEvents = events.length > 0;\n\n  return (\n    <td\n      className={cnCalendar('Day', {\n        current: isCurrent,\n        otherMonth: day.meta && day.meta.otherMonth,\n        weekend: isWeekend,\n        hasEvents: hasEvents,\n        passed: isPassed\n      }, [className])}\n      tabIndex={1}\n      style={hasEvents ?\n        { background: getBackground(events) } :\n        undefined\n      }\n    >\n      {isCurrent ?\n        <span className={cnCalendar('DayInner')}>{currentDate}</span> :\n        currentDate\n      }\n      {\n        hasEvents && (\n          <div className={cnCalendar('DayInfo')}>\n            {events.map((event, idx) => (\n              <Fragment key={idx}>\n                <h3 className={cnCalendar('DayInfoSummary')}>{event.summary}</h3>\n                <div className={cnCalendar('DayInfoDescription')}>\n                  {\n                    [\n                      event.description,\n                      event.location,\n                      event.url\n                    ]\n                      .filter(Boolean)\n                      .map((val, idx) => <p key={idx}>{val}</p>)\n                  }\n                </div>\n              </Fragment>\n            ))}\n          </div>\n        )\n      }\n    </td>\n  );\n}\n","import React from 'react';\n\nimport { cnCalendar } from '..';\nimport { getWeekDays } from '../date';\n\nconst weekDays = getWeekDays();\n\nexport function DaysOfWeek() {\n  return (\n    <tr className={cnCalendar('DaysOfWeek')}>\n      {\n        weekDays.map(dayOfWeek =>\n          <th key={dayOfWeek}>{dayOfWeek}</th>\n        )\n      }\n    </tr>\n  );\n}\n","import React from 'react';\n\nimport { cnCalendar } from '..';\nimport { IEvent } from '../date';\n\ninterface ILegendProps {\n  data: IEvent[];\n}\n\nexport function Legend({ data }: ILegendProps) {\n  return (\n    <ul className={cnCalendar('Legend')}>\n      {\n        data\n          .filter(event => event.summary)\n          .map(event => {\n            const eventStartStr = event.start.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });\n            const eventEndStr = event.end.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });\n\n            return (<li\n              className={cnCalendar('LegendItem')}\n              style={{ color: event.color, fontSize: '50px', lineHeight: '24px' }}\n              key={event.start.toString()}\n            >\n              <span style={{ fontSize: '14px', verticalAlign: 'middle' }}>\n                <strong>\n                  {\n                    eventStartStr !== eventEndStr ?\n                      [eventStartStr, eventEndStr].join('-') :\n                      eventStartStr\n                  }\n                </strong>\n                {' '}\n                {event.summary}\n              </span>\n            </li>)\n          }\n        )\n      }\n    </ul>\n  );\n}\n","export default `07.02-14.02 Командировка. 07.02 — Я love Frontend, 11-12 — тренинг\n21.02-26.02 Командировка. пЯТЬница, БЭМап, Хакатон\n28.02-04.03 Отпуск?\n23.03 Субботик тест тест\n28.03 ШРИ\n10.04-12.04 Тренинг\n27.04-28.04 Субботник\n26.04 БЭМап? Сплин?\n16.05 Румыния\n24.05 пЯТЬница, БЭМап\n31.05-03.06 Поход\n06.06-08.06 Румыния\n15.06-17.06 muse, disturbed\n14.06-15.06 БЭМап\n17.06-19.06 Тренинг\n22.06-23.06 Субботник?\n13.07-14.07 Субботник\n29.07-30.07 Rammstein?\n18.07-20.07 Конфа Барселона ?\n17.08-18.08 Субботник?\n23.08-24.08 пЯТЬница, БЭМап\n10.10-12.10 nordic.js?\n26.10-27.10 Субботник\n22.11-23.11 пЯТЬница, БЭМап\n`","import React, { Component } from 'react';\n\nimport {\n  buildYearArr,\n  getEventsByDay,\n  parseHumanEvents,\n  getDayId,\n  isSameDay\n} from './date';\n\nimport { cnCalendar } from '.';\nimport './Calendar.css';\n\nimport { Day } from './Day/Day';\nimport { DaysOfWeek } from './DaysOfWeek/DaysOfWeek';\nimport { Legend } from './Legend/Legend';\n\nimport data from '../../events.js';\n// TODO: это преобразование должно быть снаружи компонента\nconst normalizedEvents = parseHumanEvents(data);\nconst events = getEventsByDay(normalizedEvents);\n\ninterface ICalendarProps {\n  year?: number;\n}\n\nexport class Calendar extends Component<ICalendarProps> {\n  render() {\n    const now = new Date();\n    const year = buildYearArr(this.props.year || now.getFullYear());\n\n    return (\n      <div className={cnCalendar()}>\n        <div className={cnCalendar('Year')}>\n          {\n            year.map((month, idx) => {\n              const monthDate = new Date();\n              monthDate.setMonth(idx);\n\n              return (\n                <div className={cnCalendar('Month')} key={idx}>\n                  <h2 className={cnCalendar('MonthName')}>\n                    {monthDate.toLocaleDateString('ru-RU', { month: 'long' })}\n                  </h2>\n                  <table className={cnCalendar('MonthTable')}><tbody>\n                    <DaysOfWeek />\n                    {\n                      month.map((week, idx) => (\n                        <tr className={cnCalendar('Week')} key={idx}>\n                          {\n                            week.map((day, idx) => {\n                              const dayDate = day.date;\n                              const dayId = getDayId(dayDate);\n                              const currentEvents = events[dayId] || [];\n\n                              return (<Day\n                                day={day}\n                                isCurrent={isSameDay(dayDate, now)}\n                                isWeekend={idx > 4}\n                                events={currentEvents}\n                                isPassed={day.date < now}\n                                key={dayId}\n                              />);\n                            })\n                          }\n                        </tr>\n                      ))\n                    }\n                  </tbody></table>\n                </div>\n              );\n            })\n          }\n        </div>\n        <Legend data={normalizedEvents} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport { Calendar } from './blocks/Calendar/Calendar';\n\nclass App extends Component {\n  render() {\n    return (\n      <Calendar/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
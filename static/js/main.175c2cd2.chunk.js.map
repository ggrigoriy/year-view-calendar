{"version":3,"sources":["blocks/Calendar/colors.ts","blocks/Calendar/date.ts","blocks/Calendar/index.ts","blocks/Calendar/Day/Day.tsx","blocks/Calendar/DaysOfWeek/DaysOfWeek.tsx","blocks/Calendar/Legend/Legend.tsx","blocks/Calendar/Calendar.tsx","App.tsx","../events.js","serviceWorker.ts","index.tsx"],"names":["colors","iterateByDay","getDayOfWeekIndex","date","getDay","startDate","endDate","dateIterator","regenerator_default","a","wrap","_context","prev","next","Date","setDate","getDate","stop","_marked","this","getDayId","month","getMonth","day","getFullYear","join","eventTypes","BUSINESS_TRIP","VACATION","CONCERT","SUBBOTNIK","UNKNOWN","getEventType","origEvent","text","summary","description","toLowerCase","_arr","Object","values","_i","length","type","includes","getColor","eventTypesVals","indexOf","humanDateToJs","humanDate","split","cnCalendar","cn","getBackground","events","color","reduce","acc","event","idx","push","Day","_ref","isCurrent","isWeekend","isPassed","className","currentDate","hasEvents","react_default","createElement","current","otherMonth","meta","weekend","passed","tabIndex","style","background","undefined","map","react","key","location","url","filter","Boolean","val","weekDays","locale","arguments","toLocaleDateStringOpts","weekday","i","toLocaleDateString","getWeekDays","DaysOfWeek","dayOfWeek","Legend","filteredData","data","colorLegend","today","setHours","isTodayMarked","keys","eventStartStr","start","eventEndStr","end","shouldMarkToday","markToday","toString","Calendar","_Component","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","normalizedEvents","_event$split","_event$split2","toArray","interval","eventsData","slice","_interval$split","_interval$split2","slicedToArray","_eventsData$join$spli","_eventsData$join$spli2","trim","parsedEvent","sort","b","intervalIterator","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","dayId","value","err","return","inherits","createClass","_this2","now","year","setFullYear","yearArr","weekIdx","monthIdx","dayOfWeekIdx","prevDate","buildYearArr","monthDate","setMonth","week","date1","date2","dayDate","currentEvents","Component","App","Calendar_Calendar_Calendar","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.175c2cd2.chunk.js","sourcesContent":["export const colors = [\n    '#E59942', 'rebeccapurple', '#649B5E',\n    '#49B851', '#14A0E7', '#A2EEFE', '#79B473'\n];\n","import { colors } from './colors';\n\n/**\n * Возвращает индекс дня недели, начиная с понедельника\n * @param date Date - дата, для которой необходимо вернуть индекс\n */\nfunction getDayOfWeekIndex(date: Date) {\n    return (date.getDay() + 6) % 7;\n}\n\n/**\n * Возвращает массив названий дней недели для заданной локали\n * По-умолчанию ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс']\n * @param locale Локаль\n */\nexport function getWeekDays(locale = 'ru-Ru') {\n    const weekDays: string[] = [];\n    const toLocaleDateStringOpts = { weekday: 'short' };\n\n    const dateIterator = new Date();\n\n    for (let i = 0; i < 7; i++) {\n        dateIterator.setDate(dateIterator.getDate() + 1);\n        weekDays[getDayOfWeekIndex(dateIterator)] = dateIterator.toLocaleDateString(locale, toLocaleDateStringOpts);\n    }\n\n    return weekDays;\n};\n\n/**\n * Возвращает итератор по одному дню от startDate до endDate\n * @param startDate Date - дата начала\n * @param endDate Date — конечная дата\n */\nexport function *iterateByDay(startDate: Date, endDate: Date): IterableIterator<Date> {\n    const dateIterator = new Date(startDate);\n\n    while (dateIterator <= endDate) {\n        yield dateIterator;\n        dateIterator.setDate(dateIterator.getDate() + 1);\n    }\n}\n\n/**\n * Для переданной даты возвращает строку вида YYYYMMDD\n * @param date Date — дата\n */\nexport function getDayId(date: Date): string {\n    const month = date.getMonth();\n    const day = date.getDate();\n\n    return [\n        date.getFullYear(),\n        (month < 10 ? '0' : '') + month,\n        (day < 10 ? '0' : '') + day\n    ].join('');\n}\n\n/**\n * Проверяет, что две даты — это один и тот же день\n * @param date1 Date\n * @param date2 Date\n */\nexport function isSameDay(date1: Date, date2: Date): boolean {\n    return getDayId(date1) === getDayId(date2);\n}\n\nexport interface IDay {\n    date: Date;\n    meta?: IDayMeta;\n}\n\ninterface IDayMeta {\n    current?: boolean;\n    otherMonth?: boolean;\n}\n\n/**\n * Генерирует массив из 12 месяцев, содержащих массивы недель, содержащие массивы дней\n * @param year number - год, для которого необходимо сгенерировать массив\n */\nexport function buildYearArr(year?: number) {\n    if (!year) {\n        const now = new Date();\n        year = now.getFullYear();\n    }\n\n    const startDate = new Date(year, 0, 1); // 1st Jan of current year\n    const dateIterator = new Date(startDate);\n    const endDate = new Date(startDate);\n    endDate.setFullYear(startDate.getFullYear() + 1);\n\n    const yearArr : Array<Array<Array<IDay>>> = [];\n    let weekIdx = 0;\n\n    while (dateIterator < endDate) {\n        const monthIdx = dateIterator.getMonth();\n\n        if (!yearArr[monthIdx]) {\n            weekIdx = 0;\n            yearArr[monthIdx] = [];\n        }\n\n        const dayOfWeekIdx = getDayOfWeekIndex(dateIterator);\n\n        if (!yearArr[monthIdx][weekIdx]) {\n            yearArr[monthIdx][weekIdx] = [];\n\n            // when month starts not on monday\n            // keep the days of previous month\n            for (let i = 0; i < dayOfWeekIdx; i++) {\n                const prevDate = new Date(dateIterator);\n                prevDate.setDate(prevDate.getDate() - dayOfWeekIdx + i);\n\n                yearArr[monthIdx][weekIdx].push({\n                    date: prevDate,\n                    meta: {\n                        otherMonth: true\n                    }\n                });\n            }\n        }\n\n        yearArr[monthIdx][weekIdx][dayOfWeekIdx] = {\n            date: new Date(dateIterator)\n        };\n\n        if (getDayOfWeekIndex(dateIterator) === 6) {\n            weekIdx++;\n        }\n\n        dateIterator.setDate(dateIterator.getDate() + 1);\n    }\n\n    return yearArr;\n}\n\nexport interface IEvent {\n    start: Date;\n    end: Date;\n    summary?: string;\n    description?: string;\n    location?: string;\n    url?: string;\n    color: string;\n    type?: string;\n}\n\n// TODO: actualy the structure is never used as is anywhere yet\n// consider to simplify\nconst eventTypes = {\n    BUSINESS_TRIP: 'командировка',\n    VACATION: 'отпуск',\n    CONCERT: 'концерт',\n    SUBBOTNIK: 'субботник',\n    UNKNOWN: ''\n};\n\nfunction getEventType(origEvent: any) {\n    const text = (origEvent.summary + origEvent.description).toLowerCase();\n\n    for (const type of Object.values(eventTypes)) {\n        if (text.includes(type)) {\n            return type;\n        }\n    }\n\n    return eventTypes.UNKNOWN;\n}\n\nconst getColor = (function() {\n    const eventTypesVals = Object.values(eventTypes);\n\n    return function(origEvent: any): string {\n        return colors[eventTypesVals.indexOf(getEventType(origEvent))];\n    }\n})();\n\nexport function icalToInternalFormat(icalData: any[]): IEvent[] {\n    return icalData.reduce((acc: IEvent[], origEvent, idx): IEvent[] => {\n        if (origEvent.summary || origEvent.description) {\n            acc.push({\n                start: new Date(origEvent.start),\n                end: new Date(origEvent.end),\n                summary: origEvent.summary,\n                description: origEvent.description,\n                location: origEvent.location,\n                url: origEvent.url && origEvent.url.params.VALUE,\n                // TODO: not optimal\n                color: getColor(origEvent),\n                type: getEventType(origEvent)\n            });\n        }\n\n        return acc;\n    }, [])\n    .sort((a, b) => +a.start - +b.start); // TODO: check if it's really needed\n}\n\nexport type IEventsByDay = Record<string, IEvent[]>;\n\nexport function getEventsByDay(events: IEvent[]) {\n    return events.reduce((acc: IEventsByDay, event, idx) => {\n        const intervalIterator = iterateByDay(event.start, event.end);\n\n        for (let date of intervalIterator) {\n            const dayId = getDayId(date);\n\n            acc[dayId] || (acc[dayId] = []);\n\n            acc[dayId].push(event);\n        }\n\n        return acc;\n    }, {} as IEventsByDay);\n}\n\nfunction humanDateToJs(humanDate: string) {\n    const date = humanDate.split('.');\n\n    return new Date(+date[2] || new Date().getFullYear(), +date[1] - 1, +date[0]);\n}\n\nexport function parseHumanEvents(eventsDescription: string): IEvent[] {\n    const events = eventsDescription.split('\\n');\n\n    return events.map(event => {\n        const [interval, ...eventsData] = event.split(/\\s/);\n        const [start, end] = interval.split('-');\n        const [summary, ...descriptionData] = eventsData.join(' ').split('.');\n        const description = descriptionData.join('.').trim();\n        const parsedEvent = {\n            start: humanDateToJs(start),\n            end: humanDateToJs(end || start),\n            summary,\n            description\n        } as IEvent;\n\n        parsedEvent.type = getEventType(parsedEvent);\n        parsedEvent.color = getColor(parsedEvent)\n\n        return parsedEvent;\n    })\n    .sort((a, b) => (+a.start - +b.start) + (+a.end - +b.end))\n}\n","import { cn } from '@bem-react/classname';\n\nexport const cnCalendar = cn('Calendar');\n","import React, { Fragment } from 'react';\nimport { IDay, IEvent } from '../date';\n\ninterface IDayProps {\n  day: IDay;\n  isCurrent: boolean;\n  events: IEvent[];\n  isWeekend: boolean;\n  isPassed: boolean;\n  className?: string;\n}\n\nimport { cnCalendar } from '..';\n\nfunction getBackground(events: IEvent[]): string {\n  if (events.length === 1) {\n    return events[0].color;\n  }\n  return 'linear-gradient(to bottom, ' +\n    events.reduce((acc: string[], event, idx) => {\n      acc.push(\n        event.color + ' ' + (idx * 100 / events.length) + '%',\n        event.color + ' ' + ((idx + 1) * 100 / events.length) + '%'\n      );\n\n      return acc;\n    }, []).join(', ') +\n    ')';\n}\n\nexport function Day({ day, isCurrent, isWeekend, isPassed, events, className }: IDayProps) {\n  const currentDate = day.date.getDate();\n  const hasEvents = events.length > 0;\n\n  return (\n    <td\n      className={cnCalendar('Day', {\n        current: isCurrent,\n        otherMonth: day.meta && day.meta.otherMonth,\n        weekend: isWeekend,\n        hasEvents: hasEvents,\n        passed: isPassed\n      }, [className])}\n      tabIndex={1}\n    >\n      <div\n        className={cnCalendar('DayText')}\n        style={hasEvents ?\n          { background: getBackground(events) } :\n          undefined\n        }\n      >\n        {currentDate}\n      </div>\n      {\n        hasEvents && (\n          <div className={cnCalendar('DayInfo')}>\n            {events.map((event, idx) => (\n              <Fragment key={idx}>\n                <h3 className={cnCalendar('DayInfoSummary')}>{event.summary}</h3>\n                <div className={cnCalendar('DayInfoDescription')}>\n                  {\n                    [\n                      event.description,\n                      event.location,\n                      event.url\n                    ]\n                      .filter(Boolean)\n                      .map((val, idx) => <p key={idx}>{val}</p>)\n                  }\n                </div>\n              </Fragment>\n            ))}\n          </div>\n        )\n      }\n    </td>\n  );\n}\n","import React from 'react';\n\nimport { cnCalendar } from '..';\nimport { getWeekDays } from '../date';\n\nconst weekDays = getWeekDays();\n\nexport function DaysOfWeek() {\n  return (\n    <tr className={cnCalendar('DaysOfWeek')}>\n      {\n        weekDays.map(dayOfWeek =>\n          <th key={dayOfWeek}>{dayOfWeek}</th>\n        )\n      }\n    </tr>\n  );\n}\n","import React from 'react';\n\nimport { cnCalendar } from '..';\nimport { IEvent } from '../date';\n\ninterface ILegendProps {\n  data: IEvent[];\n}\n\nexport function Legend({ data }: ILegendProps) {\n  const filteredData = data.filter(event => event.summary);\n\n  interface IColorLegend {\n    [key: string]: string;\n  }\n\n  const colorLegend = filteredData.reduce((acc: IColorLegend, event) => {\n    acc[event.color] = event.type || '???';\n\n    return acc;\n  }, {} as IColorLegend);\n\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  let isTodayMarked = false;\n\n  return (\n    <div className={cnCalendar('Legend')}>\n      <ul className={cnCalendar('LegendList')}>\n        {\n          Object.keys(colorLegend).map((color, idx) => (\n            <li\n              className={cnCalendar('LegendItem')}\n              style={{ color }}\n              key={idx}\n            >\n              <span className={cnCalendar('LegendItemText')}>{colorLegend[color]}</span>\n            </li>\n          ))\n        }\n      </ul>\n      <ul className={cnCalendar('LegendList')}>\n        {\n          filteredData.map((event, idx) => {\n            const eventStartStr = event.start.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });\n            const eventEndStr = event.end.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });\n            let shouldMarkToday = false;\n\n            if (!isTodayMarked && today < event.start) {\n              isTodayMarked = true;\n              shouldMarkToday = true;\n            }\n\n            return (<li\n              className={cnCalendar('LegendItem', {\n                passed: event.end < today,\n                markToday: shouldMarkToday\n              })}\n              style={{ color: event.color }}\n              key={event.start.toString() + idx}\n            >\n              <span className={cnCalendar('LegendItemText')}>\n                <strong>\n                  {\n                    eventStartStr !== eventEndStr ?\n                      [eventStartStr, eventEndStr].join('-') :\n                      eventStartStr\n                  }\n                </strong>\n                {' '}\n                {event.summary}\n              </span>\n            </li>)\n          })\n        }\n    </ul>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\n\nimport {\n  buildYearArr,\n  getEventsByDay,\n  parseHumanEvents,\n  getDayId,\n  isSameDay,\n  IEvent,\n  IEventsByDay\n} from './date';\n\nimport { cnCalendar } from '.';\nimport './Calendar.css';\n\nimport { Day } from './Day/Day';\nimport { DaysOfWeek } from './DaysOfWeek/DaysOfWeek';\nimport { Legend } from './Legend/Legend';\n\ninterface ICalendarProps {\n  data: string;\n  year?: number;\n}\n\nexport class Calendar extends Component<ICalendarProps> {\n  constructor(props: ICalendarProps) {\n    super(props);\n\n    // TODO: это преобразование должно быть снаружи компонента\n    this.normalizedEvents = parseHumanEvents(this.props.data);\n    this.events = getEventsByDay(this.normalizedEvents);\n  }\n\n  private events: IEventsByDay;\n\n  private normalizedEvents: IEvent[];\n\n  render() {\n    const now = new Date();\n    const year = buildYearArr(this.props.year || now.getFullYear());\n    const today = new Date(now);\n    today.setHours(0, 0, 0, 0);\n\n    return (\n      <div className={cnCalendar()}>\n        <div className={cnCalendar('Year')}>\n          {\n            year.map((month, idx) => {\n              const monthDate = new Date();\n              monthDate.setMonth(idx);\n\n              return (\n                <div className={cnCalendar('Month')} key={idx}>\n                  <h2 className={cnCalendar('MonthName')}>\n                    {monthDate.toLocaleDateString('ru-RU', { month: 'long' })}\n                  </h2>\n                  <table className={cnCalendar('MonthTable')}><tbody>\n                    <DaysOfWeek />\n                    {\n                      month.map((week, idx) => (\n                        <tr className={cnCalendar('Week')} key={idx}>\n                          {\n                            week.map((day, idx) => {\n                              const dayDate = day.date;\n                              const dayId = getDayId(dayDate);\n                              const currentEvents = this.events[dayId] || [];\n\n                              return (<Day\n                                day={day}\n                                isCurrent={isSameDay(dayDate, now)}\n                                isWeekend={idx > 4}\n                                events={currentEvents}\n                                isPassed={day.date < today}\n                                key={dayId}\n                              />);\n                            })\n                          }\n                        </tr>\n                      ))\n                    }\n                  </tbody></table>\n                </div>\n              );\n            })\n          }\n        </div>\n        <Legend data={this.normalizedEvents} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport { Calendar } from './blocks/Calendar/Calendar';\n\nimport data from './events.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <Calendar data={data} />\n    );\n  }\n}\n\nexport default App;\n","export default \"\\n07.02-13.02 \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0443\\n07.02 \\u042F love Frontend\\n11.02-12.02 \\u0422\\u0440\\u0435\\u043D\\u0438\\u043D\\u0433\\n21.02-26.02 \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0443\\n22.02 \\u043F\\u042F\\u0422\\u042C\\u043D\\u0438\\u0446\\u0430, \\u0411\\u042D\\u041C\\u0430\\u043F\\n23.02-24.02 \\u0425\\u0430\\u043A\\u0430\\u0442\\u043E\\u043D\\n28.02-03.03 \\u041E\\u0442\\u043F\\u0443\\u0441\\u043A\\n\\n23.03 \\u0421\\u0443\\u0431\\u0431\\u043E\\u0442\\u0438\\u043A \\u0432 \\u0421\\u0438\\u043C\\u0444\\u0435\\u0440\\u043E\\u043F\\u043E\\u043B\\u0435\\n24.03-04.04 \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0443. \\u041A\\u0430\\u043B\\u0438\\u0431\\u0440\\u043E\\u0432\\u043A\\u0438\\n\\n09.04-12.04 \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0443\\n10.04-11.04 \\u0422\\u0440\\u0435\\u043D\\u0438\\u043D\\u0433\\n11.04 \\u0410\\u043A\\u0432\\u0430\\u0440\\u0438\\u0443\\u043C\\n19.04 \\u041C\\u0438\\u0442\\u0430\\u043F \\u0432 \\u0421\\u0438\\u043C\\u0444\\u0435\\u0440\\u043E\\u043F\\u043E\\u043B\\u0435 (?)\\n25.04-28.04 \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0443\\n26.04 \\u0410\\u0443\\u043A\\u0446\\u042B\\u043E\\u043D\\n27.04 \\u0421\\u0443\\u0431\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0435\\n12.05-13.05 \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0443\\n14.05-23.05 \\u041E\\u0442\\u043F\\u0443\\u0441\\u043A\\n16.05 Cluj-Napoca, \\u0420\\u0443\\u043C\\u044B\\u043D\\u0438\\u044F\\n24.05-27.05 \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0443\\n24.05 \\u043F\\u042F\\u0422\\u042C\\u043D\\u0438\\u0446\\u0430, \\u0411\\u042D\\u041C\\u0430\\u043F\\n25.05-26.05 \\u0425\\u0430\\u043A\\u0430\\u0442\\u043E\\u043D\\n25.05 \\u041C\\u0438\\u0442\\u0430\\u043F \\u0432 \\u0421\\u0438\\u043C\\u0444\\u0435\\u0440\\u043E\\u043F\\u043E\\u043B\\u0435\\n31.05-03.06 \\u041F\\u043E\\u0445\\u043E\\u0434\\n\\n06.06-08.06 \\u0420\\u0443\\u043C\\u044B\\u043D\\u0438\\u044F\\n12.06-19.06 \\u041A\\u043E\\u043C\\u0430\\u043D\\u0434\\u0438\\u0440\\u043E\\u0432\\u043A\\u0430 \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0443\\n14.06 \\u0411\\u042D\\u041C\\u0430\\u043F (?)\\n15.06 \\u041A\\u043E\\u043D\\u0446\\u0435\\u0440\\u0442 Muse\\n16.06 \\u041A\\u043E\\u043D\\u0446\\u0435\\u0440\\u0442 Disturbed\\n17.06-18.06 \\u0422\\u0440\\u0435\\u043D\\u0438\\u043D\\u0433\\n22.06-23.06 \\u0421\\u0443\\u0431\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A \\u0432 \\u041C\\u0438\\u043D\\u0441\\u043A\\u0435 (?)\\n\\n13.07-14.07 \\u0421\\u0443\\u0431\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A \\u0432 \\u041F\\u0438\\u0442\\u0435\\u0440\\u0435, \\u0411\\u042D\\u041C\\u0430\\u043F\\n18.07-20.07 \\u041A\\u043E\\u043D\\u0444\\u0430 \\u0411\\u0430\\u0440\\u0441\\u0435\\u043B\\u043E\\u043D\\u0430 ?\\n29.07 Rammstein\\n\\n17.08-18.08 \\u0421\\u0443\\u0431\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A \\u0432 \\u0418\\u043D\\u043D\\u043E\\u043F\\u043E\\u043B\\u0438\\u0441\\u0435\\n23.08-24.08 \\u043F\\u042F\\u0422\\u042C\\u043D\\u0438\\u0446\\u0430, \\u0411\\u042D\\u041C\\u0430\\u043F\\n24.08-25.08 \\u0425\\u0430\\u043A\\u0430\\u0442\\u043E\\u043D (?)\\n\\n21.09 \\u0421\\u0443\\u0431\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A \\u0432 \\u041D\\u0438\\u0436\\u043D\\u0435\\u043C \\u041D\\u043E\\u0432\\u0433\\u043E\\u0440\\u043E\\u0434\\u0435\\n23.09-27.09 \\u0420\\u0435\\u0432\\u044C\\u044E/\\u041A\\u0438\\u0442\\u0430\\u0439 (?)\\n\\n10.10-12.10 nordic.js (?)\\n26.10-27.10 \\u0421\\u0443\\u0431\\u0431\\u043E\\u0442\\u043D\\u0438\\u043A \\u0432 \\u041C\\u043E\\u0441\\u043A\\u0432\\u0435\\n\\n22.11-23.11 \\u043F\\u042F\\u0422\\u042C\\u043D\\u0438\\u0446\\u0430, \\u0411\\u042D\\u041C\\u0430\\u043F\\n23.11-24.11 \\u0425\\u0430\\u043A\\u0430\\u0442\\u043E\\u043D (?)\\n\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["blocks/Calendar/colors.ts","blocks/Calendar/date.ts","blocks/Calendar/index.ts","blocks/Calendar/Day/Day.tsx","blocks/Calendar/DaysOfWeek/DaysOfWeek.tsx","blocks/Calendar/Calendar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["colors","iterateByDay","getDayOfWeekIndex","date","getDay","startDate","endDate","dateIterator","regenerator_default","a","wrap","_context","prev","next","Date","setDate","getDate","stop","_marked","getDayId","month","getMonth","day","getFullYear","join","cnCalendar","cn","getBackground","events","length","color","map","event","Day","_ref","isCurrent","isWeekend","isPassed","className","currentDate","hasEvents","react_default","createElement","current","otherMonth","meta","weekend","passed","style","background","undefined","eventData","idx","react","key","summary","description","location","url","filter","Boolean","val","weekDays","locale","arguments","toLocaleDateStringOpts","weekday","i","toLocaleDateString","getWeekDays","DaysOfWeek","dayOfWeek","data","origEvent","start","end","params","VALUE","sort","b","reduce","acc","intervalIterator","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","dayId","value","push","err","return","Calendar","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","now","year","setFullYear","yearArr","weekIdx","monthIdx","dayOfWeekIdx","prevDate","buildYearArr","props","monthDate","setMonth","week","date1","date2","dayDate","currentEvents","Component","App","Calendar_Calendar_Calendar","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a26bc338.chunk.js","sourcesContent":["export const colors = [\n    '#E59942', '#FBFF8C', '#649B5E', '#F6F930', '#F14D05',\n    '#49B851', '#14A0E7', '#A2EEFE', '#79B473'\n];\n","import { colors } from './colors';\n\n/**\n * Возвращает индекс дня недели, начиная с понедельника\n * @param date Date - дата, для которой необходимо вернуть индекс\n */\nfunction getDayOfWeekIndex(date: Date) {\n    return (date.getDay() + 6) % 7;\n}\n\n/**\n * Возвращает массив названий дней недели для заданной локали\n * По-умолчанию ['пн', 'вт', 'ср', 'чт', 'пт', 'сб', 'вс']\n * @param locale Локаль\n */\nexport function getWeekDays(locale = 'ru-Ru') {\n    const weekDays: string[] = [];\n    const toLocaleDateStringOpts = { weekday: 'short' };\n\n    const dateIterator = new Date();\n\n    for (let i = 0; i < 7; i++) {\n        dateIterator.setDate(dateIterator.getDate() + 1);\n        weekDays[getDayOfWeekIndex(dateIterator)] = dateIterator.toLocaleDateString(locale, toLocaleDateStringOpts);\n    }\n\n    return weekDays;\n};\n\n/**\n * Возвращает итератор по одному дню от startDate до endDate\n * @param startDate Date - дата начала\n * @param endDate Date — конечная дата\n */\nexport function *iterateByDay(startDate: Date, endDate: Date): IterableIterator<Date> {\n    const dateIterator = new Date(startDate);\n\n    while (dateIterator < endDate) {\n        yield dateIterator;\n        dateIterator.setDate(dateIterator.getDate() + 1);\n    }\n}\n\n/**\n * Для переданной даты возвращает строку вида YYYYMMDD\n * @param date Date — дата\n */\nexport function getDayId(date: Date): string {\n    const month = date.getMonth();\n    const day = date.getDate();\n\n    return [\n        date.getFullYear(),\n        (month < 10 ? '0' : '') + month,\n        (day < 10 ? '0' : '') + day\n    ].join('');\n}\n\n/**\n * Проверяет, что две даты — это один и тот же день\n * @param date1 Date\n * @param date2 Date\n */\nexport function isSameDay(date1: Date, date2: Date): boolean {\n    return getDayId(date1) === getDayId(date2);\n}\n\nexport interface IDay {\n    date: Date;\n    meta?: IDayMeta;\n}\n\ninterface IDayMeta {\n    current?: boolean;\n    otherMonth?: boolean;\n}\n\n/**\n * Генерирует массив из 12 месяцев, содержащих массивы недель, содержащие массивы дней\n * @param year number - год, для которого необходимо сгенерировать массив\n */\nexport function buildYearArr(year?: number) {\n    if (!year) {\n        const now = new Date();\n        year = now.getFullYear();\n    }\n\n    const startDate = new Date(year, 0, 1); // 1st Jan of current year\n    const dateIterator = new Date(startDate);\n    const endDate = new Date(startDate);\n    endDate.setFullYear(startDate.getFullYear() + 1);\n\n    const yearArr : Array<Array<Array<IDay>>> = [];\n    let weekIdx = 0;\n\n    while (dateIterator < endDate) {\n        const monthIdx = dateIterator.getMonth();\n\n        if (!yearArr[monthIdx]) {\n            weekIdx = 0;\n            yearArr[monthIdx] = [];\n        }\n\n        const dayOfWeekIdx = getDayOfWeekIndex(dateIterator);\n\n        if (!yearArr[monthIdx][weekIdx]) {\n            yearArr[monthIdx][weekIdx] = [];\n\n            // when month starts not on monday\n            // keep the days of previous month\n            for (let i = 0; i < dayOfWeekIdx; i++) {\n                const prevDate = new Date(dateIterator);\n                prevDate.setDate(prevDate.getDate() - dayOfWeekIdx + i);\n\n                yearArr[monthIdx][weekIdx].push({\n                    date: prevDate,\n                    meta: {\n                        otherMonth: true\n                    }\n                });\n            }\n        }\n\n        yearArr[monthIdx][weekIdx][dayOfWeekIdx] = {\n            date: new Date(dateIterator)\n        };\n\n        if (getDayOfWeekIndex(dateIterator) === 6) {\n            weekIdx++;\n        }\n\n        dateIterator.setDate(dateIterator.getDate() + 1);\n    }\n\n    return yearArr;\n}\n\nexport interface IEvent {\n    start: Date;\n    end: Date;\n    summary?: string;\n    description?: string;\n    location?: string;\n    url?: string;\n}\n\nexport function icalToInternalFormat(icalData: any[]): IEvent[] {\n    return icalData.map(origEvent => {\n        return {\n            start: new Date(origEvent.start),\n            end: new Date(origEvent.end),\n            summary: origEvent.summary,\n            description: origEvent.description,\n            location: origEvent.location,\n            url: origEvent.url && origEvent.url.params.VALUE\n        };\n    })\n    .sort((a, b) => +a.start - +b.start); // TODO: check if it's really needed\n}\n\nexport interface IEventData {\n    event: IEvent;\n    color: string;\n}\n\ntype IEventsByDay = Record<string, IEventData[]>;\n\nexport function getEventsByDay(events: IEvent[]) {\n    return events.reduce((acc: IEventsByDay, event, idx) => {\n        const intervalIterator = iterateByDay(event.start, event.end);\n\n        for (let date of intervalIterator) {\n            const dayId = getDayId(date);\n\n            acc[dayId] || (acc[dayId] = []);\n\n            acc[dayId].push({\n                event,\n                color: colors[(idx % colors.length + 1) -1]\n            });\n        }\n\n        return acc;\n    }, {} as IEventsByDay);\n}\n","import { cn } from '@bem-react/classname';\n\nexport const cnCalendar = cn('Calendar');\n","import React, { Fragment } from 'react';\nimport { IDay, IEventData } from '../date';\n\ninterface IDayProps {\n    day: IDay;\n    isCurrent: boolean;\n    events: IEventData[];\n    isWeekend: boolean;\n    isPassed: boolean;\n    className?: string;\n}\n\nimport { cnCalendar } from '..';\n\nfunction getBackground(events: IEventData[]): string {\n    if (events.length === 1) {\n        return events[0].color;\n    }\n\n    // TODO: проверить больше 2 событий в день\n\n    return 'linear-gradient(to bottom, ' + events.map(event => {\n        return event.color + ' ' + (100 / events.length) + '%';\n    }).join(', ') + ')';\n}\n\nexport function Day({ day, isCurrent, isWeekend, isPassed, events, className }: IDayProps) {\n    const currentDate = day.date.getDate();\n    const hasEvents = events.length > 0;\n\n    return (\n        <td\n            className={cnCalendar('Day', {\n                current: isCurrent,\n                otherMonth: day.meta && day.meta.otherMonth,\n                weekend: isWeekend,\n                hasEvents: hasEvents,\n                passed: isPassed\n            }, [className])}\n            style={hasEvents ?\n                { background: getBackground(events) } :\n                undefined\n            }\n        >\n            {isCurrent ?\n                <span className={cnCalendar('DayInner')}>{currentDate}</span> :\n                currentDate\n            }\n            {\n                hasEvents && (\n                    <div className={cnCalendar('DayInfo')}>\n                        {events.map((eventData, idx) => (\n                            <Fragment key={idx}>\n                                <h3 className={cnCalendar('DayInfoSummary')}>{eventData.event.summary}</h3>\n                                <div className={cnCalendar('DayInfoDescription')}>\n                                    {\n                                        [\n                                            eventData.event.description,\n                                            eventData.event.location,\n                                            eventData.event.url\n                                        ]\n                                            .filter(Boolean)\n                                            .map(val => <p>{val}</p>)\n                                    }\n                                </div>\n                            </Fragment>\n                        ))}\n                    </div>\n                )\n            }\n        </td>\n    );\n}\n","import React from 'react';\n\nimport { cnCalendar } from '..';\nimport { getWeekDays } from '../date';\n\nconst weekDays = getWeekDays();\n\nexport function DaysOfWeek() {\n    return (\n        <tr className={cnCalendar('DaysOfWeek')}>\n            {\n                weekDays.map(dayOfWeek =>\n                    <th key={dayOfWeek}>{dayOfWeek}</th>\n                )\n            }\n        </tr>\n    );\n}\n","import React, { Component } from 'react';\n\nimport {\n    buildYearArr,\n    icalToInternalFormat,\n    getEventsByDay,\n    getDayId,\n    isSameDay\n} from './date';\n\nimport { cnCalendar } from '.';\nimport './Calendar.css';\n\nimport { Day } from './Day/Day';\nimport { DaysOfWeek } from './DaysOfWeek/DaysOfWeek';\n\nimport data from '../../data.json';\n// TODO: это преобразование должно быть снаружи компонента\nconst events = getEventsByDay(icalToInternalFormat(data));\n\ninterface ICalendarProps {\n    year?: number;\n}\n\nexport class Calendar extends Component<ICalendarProps> {\n    render() {\n        const now = new Date();\n        const year = buildYearArr(this.props.year || now.getFullYear());\n\n        return (\n            <div className={cnCalendar()}>\n                {\n                    year.map((month, idx) => {\n                        const monthDate = new Date();\n                        monthDate.setMonth(idx);\n\n                        return (\n                            <div className={cnCalendar('Month')} key={idx}>\n                                <h2 className={cnCalendar('MonthName')}>\n                                    {monthDate.toLocaleDateString('ru-RU', { month: 'long' })}\n                                </h2>\n                                <table className={cnCalendar('MonthTable')}><tbody>\n                                    <DaysOfWeek/>\n                                    {\n                                        month.map((week, idx) => (\n                                            <tr className={cnCalendar('Week')} key={idx}>\n                                                {\n                                                    week.map((day, idx) => {\n                                                        const dayDate = day.date;\n                                                        const dayId = getDayId(dayDate);\n                                                        const currentEvents = events[dayId] || [];\n\n                                                        return (<Day\n                                                            day={day}\n                                                            isCurrent={isSameDay(dayDate, now)}\n                                                            isWeekend={idx > 4}\n                                                            events={currentEvents}\n                                                            isPassed={day.date < now}\n                                                            key={dayId}\n                                                        />);\n                                                    })\n                                                }\n                                            </tr>\n                                        ))\n                                    }\n                                </tbody></table>\n                            </div>\n                        );\n                    })\n                }\n            </div>\n        );\n    }\n}\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport { Calendar } from './blocks/Calendar/Calendar';\n\nclass App extends Component {\n  render() {\n    return (\n      <Calendar/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}